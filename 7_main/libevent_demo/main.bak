#include "eventloop.h"

/*
class CEventloop {
public:
    CEventloop();
    ~CEventloop();
    void Start();
    void Stop();
    void AddClient(int fd);
    void RemoveClient(int fd);
    void SetMessageCallback(std::function<void(int, const char*, int)> cb);
    void SetEventCallback(std::function<void(int, short)> cb);
}
*/

CEventloop::CEventloop()
{
    m_base = event_base_new();
    m_listener = nullptr;
}

CEventloop::~CEventloop()
{
    if (m_listener)
    {
        evconnlistener_free(m_listener);
    }
    event_base_free(m_base);
}

void CEventloop::Start()
{
    if (m_listener)
    {
        return;
    }

    struct sockaddr_in sin;
    memset(&sin, 0, sizeof(sin));
    sin.sin_family = AF_INET;
    sin.sin_port = htons(8888);

    m_listener = evconnlistener_new_bind(m_base, accept_cb, this, LEV_OPT_REUSEABLE | LEV_OPT_CLOSE_ON_FREE, -1, (struct sockaddr*)&sin, sizeof(sin));
    event_base_dispatch(m_base);
}

void CEventloop::Stop()
{
    if (m_listener)
    {
        evconnlistener_free(m_listener);
        m_listener = nullptr;
    }
}

void CEventloop::AddClient(int fd)
{
    struct event *ev = event_new(m_base, fd, EV_READ | EV_PERSIST, read_cb, this);
    event_add(ev, nullptr);
    m_clients[fd] = ev;
}

void CEventloop::RemoveClient(int fd)
{
    auto it = m_clients.find(fd);
    if (it != m_clients.end())
    {
        event_free(it->second);
        m_clients.erase(it);
    }
}

void CEventloop::SetMessageCallback(std::function<void(int, const char*, int)> cb)
{
    m_message_cb = cb;
}

void CEventloop::SetEventCallback(std::function<void(int, short)> cb)
{
    m_event_cb = cb;
}

void CEventloop::accept_cb(struct evconnlistener *listener, evutil_socket_t fd, struct sockaddr *address, int socklen, void *ctx)
{
    CEventloop *self = (CEventloop*)ctx;
    struct event_base *base = evconnlistener_get_base(listener);
    struct bufferevent *bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);

    bufferevent_setcb(bev, read_cb, nullptr, event_cb, self);
    bufferevent_enable(bev, EV_READ | EV_WRITE);
}

void CEventloop::read_cb(struct bufferevent *bev, void *ctx)
{
    CEventloop *self = (CEventloop*)ctx;
    char buf[1024] = {0};
    int len = bufferevent_read(bev, buf, sizeof(buf) - 1);
    if (len > 0)
    {
        self->m_message_cb(bufferevent_getfd(bev), buf, len);
    }
}

void CEventloop::event_cb(struct bufferevent *bev, short events, void *ctx)
{
    CEventloop *self = (CEventloop*)ctx;
    self->m_event_cb(bufferevent_getfd(bev), events);
    if (events & BEV_EVENT_EOF)
    {
        bufferevent_free(bev);
    }
    else if (events & BEV_EVENT_ERROR)
    {
        bufferevent_free(bev);
    }
}

// int main()
// {
//     CEventloop loop;
//     loop.SetMessageCallback([](int fd, const char *msg, int len) {
//         printf("fd: %d, msg: %s\n", fd, msg);
//     });
//     loop.SetEventCallback([](int fd, short events) {
//         if (events & BEV_EVENT_CONNECTED)
//         {
//             printf("Client connected.\n");
//         }
//         else if (events & BEV_EVENT_ERROR)
//         {
//             printf("Error on client connection.\n");
//         }
//         else if (events & BEV_EVENT_EOF)
//         {
//             printf("Client disconnected.\n");
//         }
//         else
//         {
//             printf("Client event~.\n");
//         }
//     });
//     loop.Start();
//     return 0;
// }
// // Compare this snippet from 7_main/libevent_demo/eventloop.cpp: